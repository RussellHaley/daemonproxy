# This example requires
#  - gkrellm (the system monitoring tool)
#  - an Xorg display (to show it on)
#  - svlogd (from the runit package)
#  - a ./log directory (or the logger won't start)
#  - socat (or your favorite scripting language) to write
#     commands to daemonproxy.sock if you want to cleanly
#     shut down the example.

# daemonproxy configuration files are really just command streams
# that daemonproxy feeds to itself at startup from a file.
# The config file is read asynchronousy, and so sevices can be
# starting and dying before the entire file has been processed.

# Yes, this means that lines beginning with '#' are ignored in the
# command stream as well.
# Empty lines are actually an error, but it doesn't hurt anything.

# In this example, we start a single gkrellm that auto-restarts
# no faster than every 4 seconds, and we log its output to a file
# using the "svlogd" program, which comes with the Runit package.

# Don't forget that all arguments are tab-separated!

# This sets up a pipe that can be attached to services.
# We use this pipe to write to our logger
fd.pipe	logpipe.r	logpipe.w

# This redirects the logging of daemonproxy itself to the logging
# handle.  THIS ALSO HAS THE SIDE EFFECT OF MAKING THE HANDLE
# NON-BLOCKING, which means gkrellm's stdout is affected too.
log.dest	fd	logpipe.w

# For shutting it down, we also create a control socket
# This is not the intended design for controlling daemonproxy,
# but it is useful if you don't want to write a controller script.
socket.create	-	daemonproxy.sock

# Define the my_logger service arguments, which logs to a directory
# named 'log'
service.args	my_logger	svlogd	log

# Specify the file handles for my_logger
#   STDIN = logpipe.r
#   STDOUT = stderr (daemonproxy's initial stderr)
#   STDERR = stderr (daemonproxy's initial stderr)
service.fds	my_logger	logpipe.r	stderr	stderr

# Auto-start my_logger always, but no faster than 5 seconds
#  between attempts
service.auto_up	my_logger	5	always

# Run /usr/bin/env to set up environment and then execute
# /usr/bin/gkrellm.
service.args	my_gkrellm	env	DISPLAY=:0	gkrellm

# Give it a stdin of /dev/null, (null is a built-in) and both
# stdout and stderr of the logger pipe
service.fds	my_gkrellm	null	logpipe.w	logpipe.w
service.auto_up	my_gkrellm	5	always

# You can execute this config file with
#   daemonproxy -ic example-1.conf
# but that won't show you error messages. A quick way to check
# for syntax errors (and especially non-tab argument separators)
# is to cat the config into interactive mode:
#   daemonproxy -i < example-01-gkrellm.conf

# To cleanly end this little example, you need the commands
#   service.auto_up my_gkrellm -
#   service.signal  my_gkrellm SIGTERM
#   service.auto_up my_logger -
#   service.signal  my_logger SIGTERM
#   terminate 0
# which you can deliver via STDIN if you're in interactive mode,
# or via ./daemonproxy.sock using socat:
#   socat UNIX:daemonproxy.sock STDIO
