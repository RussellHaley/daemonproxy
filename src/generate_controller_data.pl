#! /usr/bin/env perl

use strict;
use warnings;

my @states;
my %commands;

while (<STDIN>) {
	# Look for STATE macros with a command name, like
	# STATE(state_fn, "command")
	# We use this both for a mapping from fn pointer to fn name,
	#  and to build a hash table of command strings
	if ($_ =~ m|^\s*STATE\s*\(\s*(\S+)\s*(?:,\s*"(\S+)"\s*)?\)|) {
		push @states, { fn => $1, cmd => $2 };
		$commands{$2}= $states[-1]
			if defined $2;
	}
}

# table size is 1.5 x number of entries rounded up to power of 2.
my $mask= int(1.75 * keys %commands);
$mask |= $mask >> 1;
$mask |= $mask >> 2;
$mask |= $mask >> 4;
$mask |= $mask >> 8;
$mask |= $mask >> 16;
my $table_size= $mask+1;

sub hash_fn {
	my ($string, $mul, $shift)= @_;
	use integer;
	my $result= 0;
	$result= ((($result * $mul) >> $shift) + $_)
		for unpack( 'C' x length($string), $string );
	return $result & $mask;
}

sub build_table {
	my ($mul, $shift)= @_;
	my @table= (undef) x $table_size;
	for (values %commands) {
		my $bucket= hash_fn($_->{cmd}, $mul, $shift);
		if (defined $table[$bucket]) {
#			print STDERR join(' ', map { $_ == $bucket? 2 : $table[$_]? 1 : '-' } 0..($table_size-1))."\n";
			return undef;
		}
		$table[$bucket]= $_;
	}
	return \@table;
}

sub find_collisionless_hash_params {
	# pick factors for the hash function until each command has a unique bucket
	for (my $mul= 1; $mul < $table_size*$table_size; $mul++) {
		for (my $shift= 0; $shift < 11; $shift++) {
			my $table= build_table($mul, $shift);
			return ( $table, $mul, $shift )
				if $table;
		}
	}
	die "No value of \$shift / \$mul results in unique codes for each command\n";
}

my ($table, $mul, $shift)= find_collisionless_hash_params();

my $state_cases= join("\n", map {
	qq|	if (fn == $_->{fn}) return "$_->{fn}";|
	} @states );
my $n_cmd= keys %commands;
my $table_items= join("\n", map {
	$_? qq|	{ "$_->{cmd}", $_->{fn} },| : qq|	{ "", NULL },|
	} @$table );

print <<END;
// File generated by $0

const char *ctl_get_state_name(ctl_state_fn_t *fn) {
$state_cases
	return "invalid state";
}

// table size is $table_size
// $n_cmd commands
// mul is $mul, shift is $shift

int ctl_command_hash_func(const char* buffer) {
	int x= 0;
	const char *p= buffer;
	while (*p && *p != '\\t') {
		x= ((x * $mul) >> $shift) + (*p++ & 0xFF);
	}
	return x & $mask;
}

const ctl_command_table_entry_t ctl_command_table[]= {
$table_items
	{NULL, NULL}
};
END
